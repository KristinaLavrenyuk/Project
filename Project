
#include <Windows.h>
#include <stdio.h>

using namespace std;

const int SIZE_Y = 35, SIZE_X = 74;

wchar_t scene[SIZE_Y][SIZE_X]{};

void SetCursor(int x, int y)
{
    HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
    COORD cursorPos;
    cursorPos.X = x;
    cursorPos.Y = y;
    SetConsoleCursorPosition(hStdOut, cursorPos);
}

void SetConsoleSize(int x, int y)
{
    HANDLE wHnd = GetStdHandle(STD_OUTPUT_HANDLE);
    COORD dwSize;
    dwSize.X = x;
    dwSize.Y = y;
    SMALL_RECT windowSize = { 0, 0, x - 1, y - 1 };
    SetConsoleWindowInfo(wHnd, TRUE, &windowSize);
    SetConsoleScreenBufferSize(wHnd, dwSize);
}

void SetFont()
{
    CONSOLE_FONT_INFOEX cfi;
    //cfi.cbSize = sizeof(CONSOLE_FONT_INFOEX);
   // GetCurrentConsoleFontEx(GetStdHandle(STD_OUTPUT_HANDLE), false, &cfi);
    cfi.cbSize = 84;
    cfi.nFont = 6;
    cfi.dwFontSize.X = 8;
    cfi.dwFontSize.Y = 12;
    cfi.FontFamily = 48;
    cfi.FontWeight = 400;
    SetCurrentConsoleFontEx(GetStdHandle(STD_OUTPUT_HANDLE), FALSE, &cfi);
}

void WriteConsoleBuffer()
{
    int counter = 0;
    WORD attrib = FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_INTENSITY;
    CHAR_INFO consBuffer[SIZE_X * SIZE_Y];
    
    for (int i = 0; i < SIZE_Y; i++)
    {
        for (int j = 0; j < SIZE_X; j++)
        {
            consBuffer[counter].Char.UnicodeChar = scene[i][j];
            consBuffer[counter].Attributes = attrib;
            counter++;
        }
    }

    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);  // идентификатор консоли
    COORD bufferSize = { SIZE_X, SIZE_Y };              // размер блока данных
    COORD charPosition = { 0, 0 };                      // точка в блоке
    SMALL_RECT writeArea = { 0, 0, SIZE_X, SIZE_Y };    // область буфера для перезаписи 

    WriteConsoleOutput(hConsole, consBuffer, bufferSize, charPosition, &writeArea); 
}

void DrawFrame(int x, int y)
{
    for (int i = 0; i < y; i++)
    {
        for (int j = 0; j < x; j++)
        {
            if ((i == 0 || i == y - 1) && (j == 0 || j == x - 1)) //Углы рамки
            {
                if (i == 0 && j == 0) scene[i][j] = 9556; // ╔ 201
                else if (i == 0 && j == x - 1) scene[i][j] = 9559; // ╗ 187
                else if (i == y - 1 && j == 0) scene[i][j] = 9562; // ╚ 200
                else if (i == y - 1 && j == x - 1) scene[i][j] = 9565; // ╝ 188
            }
            else //Стороны рамки
            {
                if (i == 0 || i == y - 1) scene[i][j] = 9552; // ═ 205
                if (i == 2 && j > 0 && j < x - 1) scene[i][j] = 9552; // ═ 205
                if (j == 0 || j == x - 1) scene[i][j] = 9553; // ║ 186
            }
        }
    }
}

struct laser
{
    wchar_t view[1] = { wchar_t(9474) };   // 179 │

    int positionXLaser = 5;     // Значение последней координаты лазера по X
    int positionYLaser = 5;     // Значение последней координаты лазера по Y
    int oldXLaser = 10;         // Предыдущее значение координаты лазера по X
    int oldYLaser = 10;         // Предыдущее значение координаты лазера по Y
    int flagFire = 0;
    int flagFireTime = 0;
    int timeLaser = 0;
    int timeFlight = 0;

    void Fire(int x, int y)
    {
        positionXLaser = x;
        positionYLaser = y;
        scene[oldYLaser][oldXLaser] = ' ';
        scene[y][x] = view[0];
        oldXLaser = x;
        oldYLaser = y;
    }

    void ClearFire(int x, int y)
    {
        scene[y][x] = ' ';
    }
};

struct
{
    int positionY = 0, positionX = 1, time = 0, choose = 0, lifes = 3, counterMove = 0, deadFlag = 0;

    int XBroken = 10;
    int YBroken = 10;
    int timeBroken = 0;

    wchar_t view[3][5] = {
        {(wchar_t)9553, ' ', (wchar_t)9574, ' ', (wchar_t)9553},                        // 186 ║, 203 ╦, 186 ║
        {(wchar_t)9568, (wchar_t)9552, (wchar_t)9580, (wchar_t)9552, (wchar_t)9571},    // 204 ╠, 205 ═, 206 ╬, 205 ═, 185 ╣
        {(wchar_t)9553, ' ', ' ', ' ', (wchar_t)9553}                                   // 186 ║, 186 ║
    };

    wchar_t brokenView[4][7] = {
        {' ', ' ', ' ', 9574, ' ', ' ', ' '},
        {9553, ' ',  ' ', ' ', ' ', ' ', 9553},
        {9568, 9552, ' ', 9580, ' ', 9552, 9571},
        {9553, ' ',  ' ', ' ', ' ', ' ', 9553}
    };

    int old_X = SIZE_X / 2;     // Предыдущее значение координаты по X
    int old_Y = 5;              // Предыдущее значение координаты по Y
    laser laser;

    void MoveTo(int x, int y)
    {
        positionY = y;
        positionX = x;

        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 5; j++)
            {
                scene[old_Y + i][old_X + j] = ' ';
            }
        }

        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 5; j++)
            {
                scene[y + i][x + j] = view[i][j];
            }
        }

        old_X = x;
        old_Y = y;
    }

    void StepUp()
    {
        if (positionY - 1 > 3) MoveTo(positionX, --positionY);
    }

    void StepDown()
    {
        if (positionY + 3 < SIZE_Y - 5) MoveTo(positionX, ++positionY);
    }

    void StepRight()
    {
        if (positionX + 1 + 5 < SIZE_X - 2) MoveTo(++positionX, positionY);
    }

    void StepLeft()
    {
        if (positionX - 1 > 1) MoveTo(--positionX, positionY);
    }

    void Effect(int x)
    {
        if (positionX + 2 != x && positionX + 5 < SIZE_X - 1 && positionX > 1)
        {
            if (x > positionX + 2)
            {
                MoveTo(++positionX, positionY);
            }
            if (x < positionX + 2)
            {
                MoveTo(--positionX, positionY);
            }
        }

        choose = rand() % 8 + 1;

        if (choose == 3 || choose == 4)
        {
            counterMove++;
            if (counterMove % 2 != 0) choose = 2;
        }

        switch (choose)
        {
        case 1:
            StepUp();
            break;
        case 2:
            StepDown();
            break;
        case 3:
            StepRight();
            break;
        case 4:
            StepLeft();
            break;
        case 5:
            StepUp();
            StepRight();
            break;
        case 6:
            StepUp();
            StepLeft();
            break;
        case 7:
            StepDown();
            StepRight();
            break;
        case 8:
            StepDown();
            StepLeft();
            break;
        }
    }

    void VragDead(int x, int y)
    {
        if (deadFlag == 0)
        {
            if (x > 64) x = 64;
            if (y < 3) y = 3;
            XBroken = x;
            YBroken = y;
            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < 7; j++)
                {
                    scene[y + i][x + j] = brokenView[i][j];
                }
            }
        }
        else
        {
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 5; j++)
                {
                    scene[y + i][x + j] = ' ';
                }
            }
        }
        old_X = 5;
        old_Y = 5;
    }

    void ClearBroken()
    {
        for (int i = 0; i < 4; i++)
        {
            for (int j = 0; j < 7; j++)
            {
                scene[YBroken + i][XBroken + j] = ' ';
            }
        }

    }

    void VragSpawn(int x, int y)
    {
        positionY = y;
        positionX = x;

        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 5; j++)
            {
                scene[y + i][x + j] = view[i][j];
            }
        }

        old_X = x;
        old_Y = y;
    }

} vrag;

struct
{
    int positionX = 0;          // Текущее значение координаты по X
    int positionY = 0;          // Текущее значение координаты по Y
    int old_X = 10;             // Предыдущее значение координаты по X
    int old_Y = 10;             // Предыдущее значение координаты по Y
    int points = 0;             // Количество очков
    laser laser;
    int time = 0;
    
    char we[1] = { 30 };  // Наш внешний вид

    void MoveTo(int x, int y)
    {
        positionY = y;
        positionX = x;
        scene[old_Y][old_X] = ' ';
        scene[y][x] = we[0];
        old_X = x;
        old_Y = y;
    }

    void StepToRight() 
    {
        if (positionX < SIZE_X - 4) MoveTo(++positionX, positionY);
    }

    void StepToLeft()
    {
        if (positionX > 3) MoveTo(--positionX, positionY);
    }
} we;

struct
{
    wchar_t view[2][11] =
    {
        {'S', 't', 'a', 'r', 't', ' ', 'g', 'a', 'm', 'e'},
        {'E', 'x', 'i', 't', ' ', ' ', ' ', ' ', ' ', ' '}
    };

    wchar_t choose = 17;
    int flagChoose = 0;
    int flagExit = 0;
    wchar_t win[9] = { 'Y', 'o', 'u', ' ', 'w', 'i', 'n', '!' };
    wchar_t die[12] = { 'G', 'a', 'm', 'e', ' ', 'o', 'v', 'e', 'r', '!'};

    void WriteMenu()
    {
        for (int i = 0; i < 7; i++)
        {
            for (int j = 0; j < 20; j++)
            {
                if ((i == 0 || i == 7 - 1) && (j == 0 || j == 20 - 1)) //Углы рамки
                {
                    if (i == 0 && j == 0) scene[i + 12][j + 28] = 9556; // ╔ 201
                    else if (i == 0 && j == 20 - 1) scene[i + 12][j + 28] = 9559; // ╗ 187
                    else if (i == 7 - 1 && j == 0) scene[i + 12][j + 28] = 9562; // ╚ 200
                    else if (i == 7 - 1 && j == 20 - 1) scene[i + 12][j + 28] = 9565; // ╝ 188
                }
                else //Стороны рамки
                {
                    if (i == 0 || i == 7 - 1) scene[i + 12][j + 28] = 9552; // ═ 205
                    if (j == 0 || j == 20 - 1) scene[i + 12][j + 28] = 9553; // ║ 186
                }
            }
        }
        scene[14][42] = choose;

        for (int i = 0; i < 2; i++)
        {
            for (int j = 0; j < 11; j++)
            {
                 scene[14 + i][30 + j] = view[i][j];
            }
        }
        while (true)
        {
            if (GetAsyncKeyState(VK_UP))
            {
                scene[15][42] = ' ';
                scene[14][42] = choose;
            }
            if (GetAsyncKeyState(VK_DOWN))
            {
                scene[14][42] = ' ';
                scene[15][42] = choose;
            }
            if (GetAsyncKeyState(VK_RETURN))
            {
                flagChoose = 1;
                if (scene[15][42] == choose) flagExit = 1;
                for (int i = 0; i < 7; i++)
                {
                    for (int j = 0; j < 20; j++)
                    {
                        scene[12 + i][28 + j] = ' ';
                    }
                }
                break;
            }
            WriteConsoleBuffer();
        }
        
    }

} menu;


int main()
{
    char level[6] = "level", points[6] = "point", name[10] = "Star Wars", lifes[6] = { 3, 3, 3, 3, 3 };
    int positionLifes = 64;
    int timeAll = 30;

    SetConsoleSize(SIZE_X, SIZE_Y);
    SetFont();

    do
    {
        menu.WriteMenu();
    } while (menu.flagChoose == 0);

    if (menu.flagExit) return 0;

    //Создание рамки
    DrawFrame(SIZE_X, SIZE_Y);
    
    //Заголовок (название игры, уровень, очки, жизни)
    for (int i = 0; i < 21; i++)
    {
        if (i < 10) scene[1][i + 2] = name[i];
        else if (i == 20)
        {
            scene[1][i + 2] = 9553; // ║ 186
            scene[0][i + 2] = 9574; // ╦ 203
            scene[2][i + 2] = 9577; // ╩ 202
        }
    }
    for (int i = 0; i < 17; i++)
    {
        if (i < 6) scene[1][i + 23] = level[i];
        else if (i == 16)
        {
            scene[1][i + 23] = 9553; // ║ 186
            scene[0][i + 23] = 9574; // ╦ 203
            scene[2][i + 23] = 9577; // ╩ 202
        }
    }
    for (int i = 0; i < 17; i++)
    {
        if (i < 6) scene[1][i + 41] = points[i];
        else if (i == 16)
        {
            scene[1][i + 41] = 9553; // ║ 186
            scene[0][i + 41] = 9574; // ╦ 203
            scene[2][i + 41] = 9577; // ╩ 202
        }
    }
    while (true)
    {
        for (int i = 0; i < 6; i++) scene[1][i + 59] = lifes[i];

        vrag.positionX = rand() % 68 + 1;

        we.MoveTo(SIZE_X / 2, SIZE_Y - 2);
        vrag.MoveTo(vrag.positionX, 4);

        float step = 10;

        while (true)
        {
            SetCursor(12, 1);

            // Движение врага
            if (vrag.time >= step)
            {
                vrag.Effect(we.positionX);
                vrag.time = 0;
            }

            if (we.time == 2)
            {
                if (GetAsyncKeyState(VK_LEFT)) we.StepToLeft();
                if (GetAsyncKeyState(VK_RIGHT)) we.StepToRight();
                if (GetAsyncKeyState(VK_SPACE))
                {
                    if (we.laser.flagFire == 0)
                    {
                        we.laser.Fire(we.positionX, we.positionY - 1);
                        we.laser.flagFire = 1;
                    }
                }
                we.time = 0;
            }

            // Стрельба врага

            if (vrag.positionX + 2 <= we.positionX + 2 && vrag.positionX + 2 >= we.positionX - 2)
            {
                if (vrag.laser.flagFire == 0)
                {
                    vrag.laser.oldXLaser = 10;
                    vrag.laser.oldYLaser = 10;
                    vrag.laser.flagFire = 1;
                    vrag.laser.Fire(vrag.positionX + 2, vrag.positionY + 3);
                }
            }


            if (vrag.laser.flagFire == 1)
            {
                vrag.laser.timeLaser++;
                if (vrag.laser.timeLaser == 1)
                {
                    vrag.laser.Fire(vrag.laser.positionXLaser, ++vrag.laser.positionYLaser);
                    vrag.laser.timeLaser = 0;
                }
            }

            if (vrag.laser.positionYLaser - 1 == SIZE_Y - 3)
            {
                vrag.laser.ClearFire(vrag.laser.positionXLaser, vrag.laser.positionYLaser);
                vrag.laser.flagFire = 0;
                if (vrag.laser.positionXLaser == we.positionX)
                {
                    positionLifes--;
                    scene[1][positionLifes] = ' ';

                    if (positionLifes == 59)
                    {
                        positionLifes = 64;
                        we.points = 0;
                        vrag.lifes = 3;
                        vrag.deadFlag = 1;
                        vrag.VragDead(vrag.positionX, vrag.positionY);
                        for (int i = 0; i < 1; i++)
                        {
                            for (int j = 0; j < 11; j++)
                            {
                                scene[i + 10][j + 33] = menu.die[j];
                            }
                        }
                        do
                        {
                            menu.WriteMenu();
                        } while (menu.flagChoose == 0);
                        for (int i = 0; i < 1; i++)
                        {
                            for (int j = 0; j < 11; j++)
                            {
                                scene[i + 10][j + 33] = ' ';
                            }
                        }
                        if (menu.flagExit) return 0;
                        else break;
                    }
                }
                vrag.laser.positionXLaser = 0;
                vrag.laser.positionYLaser = 0;
            }

            // Наша стрельба
            if (we.laser.flagFire == 1) we.laser.Fire(we.laser.positionXLaser, --we.laser.positionYLaser);

            if (we.laser.positionYLaser - 1 < 4 || (we.laser.positionYLaser == vrag.positionY + 2 && we.laser.positionXLaser >= vrag.positionX && we.laser.positionXLaser <= vrag.positionX + 5))
            {
                we.laser.ClearFire(we.laser.positionXLaser, we.laser.positionYLaser);
                we.laser.flagFire = 0;
                if (we.laser.positionYLaser == vrag.positionY + 2 && we.laser.positionXLaser >= vrag.positionX && we.laser.positionXLaser <= vrag.positionX + 5)
                {
                    vrag.lifes--;
                    vrag.deadFlag = 1;
                    vrag.VragDead(vrag.positionX, vrag.positionY);
                    vrag.deadFlag = 0;
                }
                we.laser.positionXLaser = 0;
                we.laser.positionYLaser = 0;
            }

            // Смерть врага и пояление нового
            if (vrag.lifes == 0)
            {
                we.points++;
                if (we.points == 3)
                {
                    positionLifes = 64;
                    vrag.lifes = 3;
                    we.points = 0;
                    vrag.deadFlag = 1;
                    vrag.VragDead(vrag.positionX, vrag.positionY);
                    for (int i = 0; i < 1; i++)
                    {
                        for (int j = 0; j < 9; j++)
                        {
                            scene[i + 10][j + 33] = menu.win[j];
                        }
                    }
                    do
                    {
                        menu.WriteMenu();
                    } while (menu.flagChoose == 0);

                    for (int i = 0; i < 1; i++)
                    {
                        for (int j = 0; j < 9; j++)
                        {
                            scene[i + 10][j + 33] = ' ';
                        }
                    }

                    if (menu.flagExit) return 0;
                    else break;
                }

                vrag.VragDead(vrag.positionX, vrag.positionY);
                vrag.deadFlag = 1;
                vrag.positionX = rand() % 68 + 1;
                vrag.positionY = 3;
                vrag.lifes = 3;
                vrag.VragSpawn(vrag.positionX, vrag.positionY);

                if (step > 3) step -= 0.5;
            }


            wchar_t pointsStr[4]{};
            wsprintf(pointsStr, L"%d", we.points);   // Перевод очков из числа в строку 
            for (int i = 0; i < wcslen(pointsStr); i++) scene[1][47 + i] = pointsStr[i];

            // Вывод сцены
            WriteConsoleBuffer();

            if (vrag.timeBroken == 1)
            {
                vrag.ClearBroken();
                vrag.timeBroken = 0;
            }

            if (vrag.deadFlag == 1)
            {
                vrag.VragDead(vrag.positionX, vrag.positionY);
                vrag.timeBroken++;
                vrag.deadFlag = 0;
            }

            if (we.time == 1) scene[we.positionY][we.positionX] = we.we[0];
            if (vrag.time == 1) vrag.VragSpawn(vrag.positionX, vrag.positionY);

            vrag.time++;
            we.time++;

            Sleep(timeAll);
        }
    }
    system("pause");
}
